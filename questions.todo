CODING-INTERVIEW-PROBLEMS
☐ Array
    ✔ Subarray with given sum @done(20-08-17 12:49)
    ☐ Count the triplets @critical
    ☐ Find the duplicate in an array of N integers.
    ☐ Sort an array of 0’s 1’s 2’s without using extra space or sorting algo
    ☐ Repeat and Missing Number
    ☐ Merge two sorted Arrays without extra space @critical
    ✔ Kadane’s Algorithm @done(20-08-17 12:49)
    ☐ Merge Overlapping Subintervals
    ☐ Set Matrix Zeros
    ☐ Pascal Triangle
    ☐ Next Permutation
    ☐ Inversion of Array (Using Merge Sort)
    ✔ Stock Buy and Sell  @done(20-07-10 02:36)
    ☐ Rotate Matrix
    ✔ Heap Sort @done(20-06-28 13:00)
    ✔ Merge Sort  @done(20-08-11 14:31)
    ✔ Quick Sort @done(20-08-11 18:21)
☐ Maths
    ☐ Excel Column Number
    ☐ Find n^x in log N @high
    ☐ Count trailing zeros in factorial of a number
    ✔ Find GCD in Log N @high @done(20-08-16 22:37)
    ☐ Grid Unique Paths
    ☐ Go through Puzzles from GFG (Search on own)
☐ Hashing
    ☐ 2 Sum problem
    ☐ 4 Sum problem
    ☐ Longest Consecutive Sequence
    ☐ Longest Subarray with 0 sum
    ☐ Count number of subarrays with given XOR(this clears a lot of problems)
    ☐ Longest substring without repeat
☐ LinkedList
    ✔ Design a LinkedList @done(20-06-16 16:48)
    ✔ Reverse a LinkedList @done(20-06-17 02:12)
    ✔ Find middle of LinkedList @done(20-06-17 02:25)
    ✔ Merge two sorted Linked List @done(20-06-17 13:47)
    ✔ Remove N-th node from back of LinkedList @done(20-06-17 16:20)
    ✔ Delete a given Node when a node is given. (0(1) solution) @done(20-08-20 16:26)
    ☐ Add two numbers as LinkedList: both directions
    ☐ Merge k Sorted Linked Lists
    ✔ Find intersection point of two LinkedLists @done(20-06-17 17:04)
    ☐ Find intersection point of Y LinkedList
    ✔ Check if a LinkedList is palindrome or not. @done(20-06-17 18:28)
    ☐ Reverse a LinkedList in groups.
    ☐ Cycle
        ✔ Detect Cycle @done(20-08-20 03:48)
        ☐ Remove Cycle
    ☐ Flattening of a LinkedList
    ☐ Rotate a LinkedList
    ✔ Pairwise Swap Nodes @done(20-08-20 17:10)
    ✔ Clone a Linked List with random and next pointer.  @TODO:addExplanation @done(20-07-10 00:52)
☐ 2-pointer
    ☐ Merge two sorted LinkedLists
    ☐ Find the starting point of the loop.
    ☐ 3 sum
    ☐ Trapping rainwater
    ☐ Remove Duplicate from Sorted array
    ☐ Max continuous number of 1’s
☐ Greedy
    ☐ N meeting in one room
    ☐ Activity Selection
    ☐ Greedy algorithm to find minimum number of coins
    ☐ Fractional Knapsack Problem
    ☐ Minimum number of platforms required for a railway
    ☐ Job sequencing Problem
☐ Backtracking
    ☐ N queens Problem
    ☐ Sudoko
    ☐ M coloring Problem
    ☐ Rat in a Maze
    ☐ Print all Permutations of a string/array
    ☐ Word Break (print all ways)
    ☐ Combination sum-1
    ☐ Combination sum-2
    ☐ Palindrome Partioning
    ☐ Subset Sum-1
    ☐ Subset Sum-2
    ☐ K-th permutation Sequence
☐ Divide and Conquer
    ☐ 1/N-th root of an integer (use binary search) (square root, cube root, ..)
    ☐ Matrix Median
    ☐ Find the element that appears once in sorted array, and rest element appears twice (Binary search)
    ☐ Search element in a sorted and rotated array.
    ☐ K-th element of two sorted arrays
    ☐ Media of an array
☐ Bits (Optional, very rare topic in interviews, but if you have time left, someone might ask)
    ☐ Check if a number if a power of 2 or not in O(1)
    ☐ Count total set bits
    ☐ Divide Integers without / operator
    ☐ Power Set (this is very important)
    ☐ Find MSB in o(1)
    ☐ Find square of a number without using multiplication or division operators.
☐ Stack and Queue
    ☐ Implement Stack / Implement Queue
    ☐ BFS
    ☐ Implement Stack using Queue
    ☐ Implement Queue using Stack
    ☐ Check for balanced parentheses
    ☐ Next Greater Element
    ☐ Next Smaller Element
    ☐ LRU cache (vvvv. imp)
    ☐ Largest rectangle in histogram
    ☐ Sliding Window maximum
    ☐ Implement Min Stack
    ☐ Rotten Orange (Using BFS)
☐ String
    ☐ Reverse Words in a String
    ✔ Longest Palindromic substring @done(20-08-19 03:38)
    ☐ Roman Number to Integer and vice versa
    ☐ Implement ATOI/STRSTR
    ☐ Longest Common Prefix
    ☐ Rabin Karp
    ☐ Prefix Function/Z-Function
    ☐ KMP algo
    ☐ Minimum characters needed to be inserted in the beginning to make it palindromic.
    ☐ Check for Anagrams
    ☐ Count and Say
    ☐ Compare version numbers
    ✔ Print all permutations @done(20-08-19 02:21)
    ☐ Z Algorithm
☐ Binary Tree
    ✔ Inorder Traversal (with recursion and without recursion) @done(20-06-19 12:35)
    ✔ Preorder Traversal (with recursion and without recursion) @done(20-06-19 15:24)
    ✔ Postorder Traversal (with recursion and without recursion) @done(20-06-19 15:53)
    ✔ LeftView Of Binary Tree @done(20-06-19 16:57)
    ✔ Bottom View of Binary Tree @done(20-08-20 19:29)
    ☐ Top View of Binary Tree
    ✔ Level order Traversal @done(20-06-20 01:06)
    ☐ ZigZag level order traversal @high
    ✔ Height of a Binary Tree @done(20-06-20 01:06)
    ✔ Diameter of Binary Tree @done(20-06-20 16:50)
    ✔ Check if Binary tree is height balanced or not @done(20-08-20 20:35)
    ✔ LCA in Binary Tree  @today @TODO:addExplanation @done(20-07-10 02:34)
    ☐ Check if two trees are identical or not
    ☐ Maximum width of Binary Tree
    ☐ Maximum path sum
    ✔ Construct Binary Tree from inorder and preorder @high @done(20-07-12 02:19) @TODO:addExplanation
    ✔ Construct Binary Tree from Inorder and Postorder @high @done(20-07-12 02:20) @TODO:addExplanation
    ☐ Symmetric Binary Tree
    ☐ Flatten Binary Tree to LinkedList
    ☐ Check if Binary Tree is mirror of itself or not
    ✔ Is Subtree of Another Tree @done(20-08-11 23:03)
☐ Binary Search Tree
    ✔ Design BST(Search/Insert/Delete) @done(20-06-23 10:51)
    ☐ Populate Next Right pointers of Tree
    ☐ Search given Key in BST
    ☐ Construct BST from given keys.
    ✔ Check if a BT is BST or not @done(20-06-21 18:26)
    ✔ Find LCA of two nodes in BST @done(20-06-21 19:50)
    ☐ Find the inorder predecessor/successor of a given Key in BST.
    ☐ Floor and Ceil in a BST
    ☐ Find K-th smallest and K-th largest element in BST (2 different Questions)
    ☐ Find a pair with a given sum in BST
    ☐ BST iterator
    ☐ Size of the largest BST in a Binary Tree
    ☐ Serialize and deserialize Binary Tree
☐ Mixed Questions
    ☐ Binary Tree to Double Linked List
    ☐ Find median in a stream of running integers.
    ✔ K-th largest element in a stream.(Using Heaps) @done(20-07-10 03:02)
    ☐ Distinct numbers in Window.
    ✔ K-th largest element in an unsorted array. @done(20-07-10 03:03)
    ✔ Flood-fill Algorithm @done(20-06-23 11:14)
☐ Graph
    ☐ Design
    ☐ Clone a graph (Not that easy as it looks)
    ✔ DFS @done(20-06-29 13:38)
    ✔ BFS @done(20-06-29 13:38)
    ☐ Detect A cycle in Undirected Graph/Directed Graph
    ✔ Topological Sort @done(20-07-09 01:57)
    ☐ Number of islands (Do in Grid and Graph both)
    ☐ Bipartite Check
    ☐ SCC(using KosaRaju’s algo)
    ✔ Djisktra’s Algorithm(SSSP) @done(20-07-09 01:57)
    ✔ Bellman Ford Algo(SSSP) @done(20-07-09 01:58)
    ✔ Floyd Warshall Algorithm(APSP) @done(20-07-09 01:58)
    ☐ MST using Prim’s Algo
    ☐ MST using Kruskal’s Algo
    ✔ Articulation point @done(20-08-11 18:23)
☐ Dynamic Programming
    ☐ Max Product Subarray
    ✔ Longest Increasing Subsequence @done(20-07-05 15:41)  @TODO:addExplanation
    ✔ Longest Common Subsequence  @done(20-07-05 17:49) @TODO:addExplanation
    ☐ 0-1 Knapsack
    ☐ Edit Distance
    ☐ Maximum sum increasing subsequence
    ☐ Matrix Chain Multiplication
    ☐ Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find the maximum path)
    ☐ Coin change
    ☐ Subset Sum
    ☐ Rod Cutting
    ☐ Egg Dropping
    ☐ Word Break
    ☐ Palindrome Partitioning (MCM Variation)
 ☐ Tries
    ✔ Design @TODO:addDeleteFunction @done(20-07-09 02:00)
    ✔ Implement phonebook @done(20-07-09 01:57)


☐ DBMS
    ☐ What is DBMS? Advantages over file system?
    ☐ Relational vs Non Relational, Examples, Which is preferred
    ☐ ACID Properties
    ☐ Types of Keys(Super/Candidate/Alternate/Primary)
    ☐ ER Diagrams, Cardinality
    ☐ Anomalies in Relational Model(Insert/Update/Delete)
    ☐ Normalization